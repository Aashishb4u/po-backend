<?php

namespace App\Http\Controllers;

use App\BaseModels\BaseCandidateModel;
use App\Helpers\ApiConstant;
use File;
use Illuminate\Http\Request;
use App\Models\UserModel;
use App\BaseModels\BaseUserModel;
use App\Helpers\AppUtility;

class UserController extends AppController
{
    /*
   * sample json of parameter -signUp
   * {
  "name":"Name",
  "password":"password",
  "email":"example@abc.com"
  "email":"example@abc.com"
  }
   * */
    public function createUser(Request $request)
    {
        $authenticatedUser = $request->user->id_user;
        $error = null;
        $userData = $request->input();
        $user['email'] = $userData['email'];
        $user['phone_no'] = $userData['phone_no'];
        $user['firstname'] = $userData['firstname'] ?? '';
        $user['lastname'] = $userData['lastname'] ?? '';
        $user['name'] = $user['firstname'] . " " . $user['lastname'];
        $user['password'] = "tudip123";
        $user['role'] = $userData['role'];
        $user['status'] = $userData['status'];
        $user['id'] = $authenticatedUser;//id of user who loged in
        if (!empty($user)) {
            try {
                $userModelObj = new UserModel();
                $userDetails = $userModelObj->saveUserDetails($user);
                if ($userDetails == ApiConstant::EMAIL_ALREADY_EXIST || $userDetails == ApiConstant::DATA_NOT_SAVED || $userDetails == ApiConstant::EMAIL_NOT_VALID) {
                    $error = $userDetails;
                } else {
                    $userData = ApiConstant::EVENT_CREATED_SUCCESSFULLY;
                }
            } catch (\Exception $e) {
                $error = ApiConstant::EXCEPTION_OCCURED;
            }
        }
        return $this->returnableResponseData($userData, $error);
    }

    public function editUser(Request $request)
    {
        $authenticatedUser = $request->user->id_user;
        $response = null;
        $error = null;
        $UpdateData = array();
        if (!empty($authenticatedUser)) {
            $data = $request->input();
            if ($data['id']) {
                $UpdateData['id'] = $data['id'];
                $user = BaseUserModel::where('id', $UpdateData['id'])->first();
                $UpdateData['name'] = $data['firstname'] . " " . $data['lastname'];
                $UpdateData['email'] = $data['email'];
                $UpdateData['phone_no'] = $data['phone_no'];
                $UpdateData['password'] = $data['password'];
                $UpdateData['role'] = $data['role'];
                $UpdateData['status'] = $data['status'];
                $UpdateData['id_user'] = $authenticatedUser;
                if (!empty($UpdateData['id'])) {
                    if ($user) {
                        $updateObj = new UserModel();
                        $result = $updateObj->editUser($UpdateData);
                        if ($result == 1) {
                            $response = ApiConstant::UPDATED_SUCCESSFULLY;
                        } else {
                            $response = array('data' => $result, 'message' => ApiConstant::INVALID_ID);
                        }
                    } else {
                        $error = ApiConstant::INVALID_ID;
                    }
                }
            } else {
                $error = ApiConstant::ID_NOT_FOUND;
            }
        } else {
            $error = ApiConstant::AUTHENTICATION_FAILED;
        }
        return $this->returnableResponseData($response, $error);
    }

    public function viewUser(Request $request)
    {
        $authenticatedUser = $request->user->id_user;
        $response = null;
        $error = null;
        if (!empty($authenticatedUser)) {
            $visitor = new UserModel();
            $response = $visitor->viewUser($authenticatedUser);
        } else {
            $error = ApiConstant::AUTHENTICATION_FAILED;
        }
        return $this->returnableResponseData($response, $error);
    }

    public function signUp(Request $request)
    {
        $error = null;
        $userData = $request->input();
        $user['email'] = $userData['email'];
        $user['phone_no'] = $userData['phone_no'];
        $user['firstname'] = $userData['firstname'];
        $user['lastname'] = $userData['lastname'];
        $user['name'] = $user['firstname'] . " " . $user['lastname'];
        $user['password'] = $userData['password'];
        $user['qualification'] = $userData['qualification'];
        //------------------------------------upload resume------------------------------------
        $filePath = null;
        $baseUrl = public_path('resume/');//env('BasePublicUrl');
        try
        {
            if($request->hasFile('file'))
            {
                $file = $request->file('file');
                //$fileName = $file->getClientOriginalName();
                $fileExtension = $file->getClientOriginalExtension();
                if($fileExtension == 'doc' || $fileExtension == 'pdf' || $fileExtension == 'odt')
                {
                    $fileName = substr(str_shuffle("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") , 0 , rand(10, 15));
                    $resumePath = $baseUrl.$fileName.'.'.$fileExtension;
                    $file->move($baseUrl,$fileName.'.'.$fileExtension);
                    chmod($baseUrl.$fileName.'.'.$fileExtension,0777);
                    $user['resume'] = $resumePath;
                }
                else
                {
                    $error = ApiConstant::FILE_FORMAT_NOT_SUPPORTED;
                }
            }
            else
            {
                print_r("file not found");
                $error = ApiConstant::FILE_NOT_FOUND;

            }
        }
        catch (\Exception $e)
        {
            print_r($e->getMessage());
        }

        //---------------------------------------------------------------------------------------
       if (!empty($user)) {
            try {

                $userModelObj = new UserModel();
                $userDetails = $userModelObj->saveCandidateDetails($user);
                if ($userDetails == ApiConstant::EMAIL_ALREADY_EXIST || $userDetails == ApiConstant::DATA_NOT_SAVED || $userDetails == ApiConstant::EMAIL_NOT_VALID) {
                    $error = $userDetails;
                } else {
                    $userData = ApiConstant::SUCCESSFULLY_ADD;
                }
            } catch (\Exception $e) {
                $error = ApiConstant::EXCEPTION_OCCURED;
            }
        }
        return $this->returnableResponseData($userData, $error);
    }

    public function editCandidate(Request $request)
    {
        $authenticatedUser = $request->user->id_user;
        $response = null;
        $error = null;
        $UpdateData = array();
        if (!empty($authenticatedUser)) {
            $data = $request->input();
            if ($data['id']) {
                $UpdateData['id'] = $data['id'];
                $user = BaseUserModel::where('id', $UpdateData['id'])->first();
                $UpdateData['name'] = $data['firstname'] . " " . $data['lastname'];
                $UpdateData['email'] = $data['email'];
                $UpdateData['phone_no'] = $data['phone_no'];
                $UpdateData['password'] = $data['password'];
                $UpdateData['id_user'] = $authenticatedUser;
                $UpdateData['qualification']= $data['qualification'];
                $filePath = null;
                $baseUrl = public_path('resume/');
                try
                {
                    if($request->hasFile('file'))
                    {
                        $file = $request->file('file');
                        if($file !=null)
                        {
                            $fileExtension = $file->getClientOriginalExtension();
                            if($fileExtension == 'doc' || $fileExtension == 'pdf' || $fileExtension == 'odt' || $fileExtension == 'docx')
                            {
                                $fileName = substr(str_shuffle("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ") , 0 , rand(10, 15));
                                $resumePath = $baseUrl.$fileName.'.'.$fileExtension;
                                $file->move($baseUrl,$fileName.'.'.$fileExtension);
                                chmod($baseUrl.$fileName.'.'.$fileExtension,0777);
                                $UpdateData['resume'] = $resumePath;
                                $prevResume = BaseCandidateModel::where('id_user',$data['id'])->first();
                                File::delete($prevResume['resume']);
                            }
                            else
                            {
                                $error = ApiConstant::FILE_FORMAT_NOT_SUPPORTED;
                            }
                        }
                        else
                        {
                            $prevResume = BaseCandidateModel::where('id_user',$data['id'])->first();
                            $UpdateData['resume'] = $prevResume['resume'];

                        }

                    }

                }
                catch (\Exception $e)
                {
                    print_r($e->getMessage());
                }

                //---------------------------------------------------------------------------------------
                if (!empty($UpdateData['id'])) {
                    if ($user) {
                        $updateObj = new UserModel();
                        $result = $updateObj->editCandidate($UpdateData);
                        if ($result) {
                            $response = ApiConstant::UPDATED_SUCCESSFULLY;
                        } else {
                            $response = array('data' => $result, 'message' => ApiConstant::INVALID_ID);
                        }
                    } else {
                        $error = ApiConstant::INVALID_ID;
                    }
                }
            } else {
                $error = ApiConstant::ID_NOT_FOUND;
            }
        } else {
            $error = ApiConstant::AUTHENTICATION_FAILED;
        }
        return $this->returnableResponseData($response, $error);
    }

    public function forgotPassword(Request $request)
    {
        $error = null;
        $response = null;
        $user = $request->input();
        $user['email'] = $this->getTrimmedString($user['email']);
        print_r("1");

        if($user['email'] != null)
        {
            $userModel = new UserModel();
            $userCount = $userModel->getUserCount($user);//BaseUserModel::where('email',$user['email'])->count();
            if($userCount == 1)
            {
                $userDetails = $userModel->userDetailsByEmail($user);//BaseUserModel::where('email',$user['email'])->first();
                $template = "forgetPassword";
                $subject = "Password Update Request -HighSchoolgames Team";
                $to = $userDetails->email;
                $fromName = "Recrutment Team";
                $fromEmail = "test.tudip@gmail.com";
                $body['email'] = $userDetails->email;
                $body['name'] = $userDetails->name;
                $body['id'] = $userDetails->id;
                AppUtility::sendEmail($template ,  $subject  , $body  ,  $to  ,  $fromName  ,  $fromEmail );
                $response = array($user['email'] , 'message' => "Please check your email account");
            }
            else
            {
                $error = ApiConstant::INCORRECT_USER_ROLE;
            }
        }
        else
        {
            $error = ApiConstant::PARAMETER_MISSING;
        }
        return $this->returnableResponseData($response , $error);
    }

}
